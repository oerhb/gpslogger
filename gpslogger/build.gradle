buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 49
        versionName "49"

        //This allows us to run Robotium and Unit tests separately using
        //connectedAndroidTest -PtestSize=small
        testPackageName "com.mendhak.gpslogger.test"
        testInstrumentationRunner getInstrumentationTestRunner();
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    //Bug: http://stackoverflow.com/a/20675331
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        androidTest.setRoot('src/test')
    }


    if (project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    assembleRelease.doLast {
        copy{
            from "build/apk/gpslogger-release.apk"
            into "./"

            // Use a closure to map the file name
            rename { String fileName ->
                fileName.replace('release', android.defaultConfig.versionName)
            }
        }
    }
}

dependencies {

    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.1'

    compile 'com.android.support:support-v4:19.1.0'
    compile 'com.google.android.gms:play-services:4.0.30'
    compile fileTree(dir:'./src/main/libs', include: '*.jar')

    compile('commons-net:commons-net:2.0')

    compile('org.apache.httpcomponents:httpmime:4.0.3'){
        exclude module: 'commons-logging'
        exclude module: 'httpcore'
        exclude module: 'httpclient'
    }

    compile('org.apache.james:apache-mime4j:0.6.1'){
        exclude module: 'commons-logging'
    }

    compile('oauth.signpost:signpost-commonshttp4:1.2.1.1'){
        exclude module: 'commons-logging'
        exclude module: 'httpcore'
        exclude module: 'httpclient'
    }

    compile('oauth.signpost:signpost-core:1.2.1.1'){
        exclude module: 'commons-codec'
    }

    compile('com.googlecode.json-simple:json-simple:1.1')

    compile('org.slf4j:slf4j-api:1.7.6')
    compile('com.github.tony19:logback-android-classic:1.1.1-2')
    compile('com.github.tony19:logback-android-core:1.1.1-2')

}

preBuild.doFirst {
    if (!file("./src/main/res/values/test.xml").exists()) {
        // Ensure that the developer at least knows of 'test.xml'.
        //logger.warn("Please create a file at ./src/main/res/values/test.xml. If you just want to build, leave the file empty. If you want to use DropBox or OpenStreetMap features, this file must contain OAuth keys (instructions in README).")
        throw new GradleScriptException("You must create a file at ./src/main/res/values/test.xml containing the FTP details.", null)
    }
}

tasks.whenTaskAdded { task ->
    //Don't run lint. Takes too long.
    if (task.name.contains("lint")) {
        task.enabled = false
    }

    //Force the APK to be uninstalled before running tests
    if(task.name.equals("connectedAndroidTest")){
        task.dependsOn(uninstallAll)
    }
}

def getInstrumentationTestRunner() {

    def result = "android.test.InstrumentationTestRunner";

    if (project.hasProperty("testSize")) {

        switch (project.getProperties().get("testSize")) {

            case "small":
                result = "com.mendhak.gpslogger.SmallInstrumentationTestRunner";
                break;

            case "medium":
                result = "com.mendhak.gpslogger.MediumInstrumentationTestRunner";
                break
        }
    }

    logger.lifecycle("Using TestRunner: " + result)

    return result
}